services:
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse
    volumes:
      - ch_data:/var/lib/clickhouse
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    ports:
      - "${CONNECT_TO_CLICKHOUSE_HTTP_PORT}:${CLICKHOUSE_HTTP_PORT}" # HTTP
      - "${CONNECT_TO_CLICKHOUSE_TCP_PORT}:${CLICKHOUSE_TCP_PORT}" # TCP
    restart: unless-stopped
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: ${CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT}
    healthcheck:
      test: ["CMD", "clickhouse-client", "--host", "${CLICKHOUSE_HOST}", "--query", "SELECT 1"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - dev
  redis:
    image: redis:latest
    container_name: redis
    volumes:
      - redis:/data
    ports:
      - "${CONNECT_TO_REDIS_PORT}:${REDIS_PORT}"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - dev
  rabbit:
    image: rabbitmq:alpine
    container_name: rabbitmq
    volumes:
      - rabbitmq:/var/lib/rabbitmq
    ports:
      - "${CONNECT_TO_RABBITMQ_HTTP_PORT}:${RABBITMQ_HTTP_PORT}" # HTTP
      - "${CONNECT_TO_RABBITMQ_AMQP_PORT}:${RABBITMQ_AMQP_PORT}" # AMQP
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      RABBITMQ_ENABLED_PLUGINS: ${RABBITMQ_ENABLED_PLUGINS}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      start_period: 10s
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - dev
  app:
    build: .
    container_name: fastapi
    volumes:
      - ./app:/usr/src/app
    ports:
      - "${CONNECT_TO_PORT}:${PORT}"
    restart: unless-stopped
    env_file:
      - .env
    command: bash -c "python db/orm/migration.py && uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4 --log-level info --reload"
    depends_on:
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    networks:
      - dev
  celery-worker:
    build: .
    container_name: celery_worker
    volumes:
      - ./app:/usr/src/app
    env_file:
      - .env
    command: bash -c "celery -A celery_app.celery_app worker --loglevel=info"
    depends_on:
      redis:
        condition: service_healthy
      rabbit:
        condition: service_healthy
    networks:
      - dev

volumes:
  ch_data:

  redis:

  rabbitmq:

networks:
  dev:
